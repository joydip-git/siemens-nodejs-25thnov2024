JS code compilation:
Node.js does not compile JavaScript to C or C++. Instead, it uses the V8 JavaScript engine, which directly compiles JavaScript code into native machine code. Here's how the process works:

1.Parsing: When you run JavaScript code in Node.js, the V8 engine first parses the JavaScript source code into an Abstract Syntax Tree (AST).

2. Compilation: V8 then compiles the AST into bytecode. This bytecode is not C or C++ but a lower-level representation that V8 can execute more efficiently.

3. Execution: The V8 engine executes this bytecode. If the code is executed frequently, V8 may optimize it further by compiling it to native machine code using just-in-time (JIT) compilation.

In summary, Node.js relies on the V8 engine to compile JavaScript into bytecode and execute it, rather than compiling to C or C++.

Asynchronity in Node JS:
-------------------------------------
the asynchronity is handled in node js in two ways:
a. nactive async mechanism		2. threadpool

libuv library => manages asynchronous operations in Node JS and is written in C language

all asynchornous operations are offloaded from the main thread and handed over to "libuv", which has a pool of 4 threads.

whenever there is any task has to be executed asynchronously "libuv" checks the type of oprtaion and then ----

1. if the operation can be off-loaded to O/S kernel (which provides some asynchronous facilities - native async facility), then that is given to kernel
node js libuv uses polling mechanism, to check whther the operation is over or not. if the operation is over, then corresponding callback is pused into a queue which at some point is pushed into main thread by event-loop. (Network operation)
examples: "epoll" for linux, "Kqueue" for Mac and "IO Completion port" for windows

2. if the operation can't be off-loaded to O/S kernel (because it is not that tupe of operation), then libuv uses threads from its pool 4 threads to execute it (any CPU-bound operation - I/O operation). libuv uses polling mechanism, to check whther the operation is over or not. if the operation is over, then corresponding callback is pused into a queue which at some point is pushed into main thread by event-loop.


Event Loop:
--------------------------------------------
this is a s/w which is part of the "libuv" and is written in C
it manages (co-ordinates) the execution of synchronous and asynchronous operations
it manages the order of execution of callbacks of different types of asynchronous operations
